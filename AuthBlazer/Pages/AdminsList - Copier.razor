@page "/users"
@using Microsoft.EntityFrameworkCore
@using AuthBlazer.Data 
@inject ApplicationDbContext DbContext
@attribute [Authorize(Roles = "Admin")]

<div class="mt-2 mb-5 me-4">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/home" Text="Home" />
        <RadzenBreadCrumbItem Path="/userlist" Text="Users"/>
    </RadzenBreadCrumb>
</div>
<div class="d-flex justify-content-between mb-4">
    <h3 class="mt-1">User List</h3>
    <a href="/Identity/Account/Register" class="btn btn-dark text-white">Register</a>
</div>
<RadzenDataGrid TItem="ApplicationUser" Data="@Users" PageSize="10"
                AllowSorting="true" AllowPaging="true" AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Simple">
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Id" Title="Id" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="UserName" Title="Email" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Email" Title="Username" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="PhoneNumber" Title="Phone Number" Sortable="true">
            <Template Context="data">
                @{
                    var phoneNumber = string.IsNullOrEmpty(data.PhoneNumber) ? "0000000000" : data.PhoneNumber;
                }
                @phoneNumber
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn TItem="ApplicationUser" Property="IsAdmin" Title="Is Admin" Sortable="true" />
        <RadzenDataGridColumn>
            <Template Context="data">
                <a class="rounded-circle btn shadow-sm me-2" href="/edituser/@data.Id">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                        <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                        <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5z"/>
                    </svg>
                </a>
                <button class="rounded-circle btn shadow-sm" @onclick="() => DeleteUser(data.Id)">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash3-fill" viewBox="0 0 16 16">
                                      <path d="M11 1.5v1h3.5a.5.5 0 0 1 0 1h-.538l-.853 10.66A2 2 0 0 1 11.115 16h-6.23a2 2 0 0 1-1.994-1.84L2.038 3.5H1.5a.5.5 0 0 1 0-1H5v-1A1.5 1.5 0 0 1 6.5 0h3A1.5 1.5 0 0 1 11 1.5m-5 0v1h4v-1a.5.5 0 0 0-.5-.5h-3a.5.5 0 0 0-.5.5M4.5 5.029l.5 8.5a.5.5 0 1 0 .998-.06l-.5-8.5a.5.5 0 1 0-.998.06m6.53-.528a.5.5 0 0 0-.528.47l-.5 8.5a.5.5 0 0 0 .998.058l.5-8.5a.5.5 0 0 0-.47-.528M8 4.5a.5.5 0 0 0-.5.5v8.5a.5.5 0 0 0 1 0V5a.5.5 0 0 0-.5-.5"/>
                     </svg>
                </button>
            </Template>     
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    public int UserCount { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var identityUsers = await DbContext.Users.ToListAsync();
        Users = identityUsers.Select(u => new ApplicationUser
        {
            Id = u.Id,
            UserName = u.UserName,
            Email = u.Email,
            PhoneNumber = u.PhoneNumber,
            // IsAdmin = u.IsAdmin,
        }).ToList();

        UserCount = Users.Count;
    }

    private async Task DeleteUser(string userId)
    {
        var userToDelete = await DbContext.Users.FirstOrDefaultAsync(u => u.Id == userId);
        if (userToDelete != null)
        {
            DbContext.Users.Remove(userToDelete);
            await DbContext.SaveChangesAsync();
            await LoadData();
        }
    }
}
