@page "/userlist"
@using Microsoft.EntityFrameworkCore
@using AuthBlazer.Data 
@inject ApplicationDbContext DbContext
@attribute [Authorize(Roles = "Admin")]

<div class="mt-2 mb-5 me-4">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/home" Text="Home" />
        <RadzenBreadCrumbItem Path="/userlist" Text="Users"/>
    </RadzenBreadCrumb>
</div>

<h3>User List</h3>

<RadzenDataGrid TItem="ApplicationUser" Data="@Users" PageSize="10"
                AllowSorting="true" AllowPaging="true" AllowFiltering="true"
                FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                FilterMode="FilterMode.Simple">
    <Columns>
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Id" Title="Id" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="Email" Title="Email" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="UserName" Title="Username" Sortable="true" />
        <RadzenDataGridColumn TItem="ApplicationUser" Property="PhoneNumber" Title="Phone Number" Sortable="true">
            <Template Context="data">
                @{
                    var phoneNumber = string.IsNullOrEmpty(data.PhoneNumber) ? "0000000000" : data.PhoneNumber;
                }
                @phoneNumber
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private List<ApplicationUser> Users { get; set; } = new List<ApplicationUser>();
    public int UserCount { get; private set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }

    private async Task LoadData()
    {
        var identityUsers = await DbContext.Users.ToListAsync();
        Users = identityUsers.Select(u => new ApplicationUser
        {
            Id = u.Id,
            UserName = u.UserName,
            Email = u.Email,
            PhoneNumber = u.PhoneNumber,
        }).ToList();

        UserCount = Users.Count;
    }
}
