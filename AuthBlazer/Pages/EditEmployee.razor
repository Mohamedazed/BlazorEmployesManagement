@page "/EditEmployee/{Id:int}"
@using AuthBlazer.Data
@inject EmployeeService employeeService
@inject NavigationManager NavigationManager

<div class="mt-2 mb-5 me-4">
    <RadzenBreadCrumb>
        <RadzenBreadCrumbItem Path="/home" Text="Home" />
        <RadzenBreadCrumbItem Path="/Employees" Text="Employees"/>
        <RadzenBreadCrumbItem Path="#" Text="Edit Employee"/>
    </RadzenBreadCrumb>
</div>
<h3>Edit Employee</h3>
<hr />
<EditForm Model="@obj" OnValidSubmit="@UpdateEmployee" class="p-5 bg-white border shadow mt-3 m-1">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="row">
    <div class="form-group col-5">
        <label for="fullName">Full Name:</label>
        <InputText id="fullName" class="form-control" @bind-Value="@obj.FullName"/>
        <ValidationMessage For="@(() => obj.FullName)" />
    </div>

    <div class="form-group col-7">
        <label for="address">Address:</label>
        <InputText id="address" class="form-control" @bind-Value="@obj.Address" />
        <ValidationMessage For="@(() => obj.Address)" />
    </div>
    </div>
    <div class="row">
    <div class="form-group col-7">
        <label for="email">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="@obj.Email" />
        <ValidationMessage For="@(() => obj.Email)" />
    </div>

    <div class="form-group col-5">
        <label for="phone">Phone:</label>
        <InputText id="phone" class="form-control" @bind-Value="@obj.Phone" />
        <ValidationMessage For="@(() => obj.Phone)" />
    </div>
    </div>
    <div class="row">
    <div class="form-group col-4">
        <label for="city">City:</label>
        <InputText id="city" class="form-control" @bind-Value="@obj.City" />
        <ValidationMessage For="@(() => obj.City)" />
    </div>

    <div class="form-group col-4">
        <label for="designation">Designation:</label>
        <InputText id="designation" class="form-control" @bind-Value="@obj.Designation" />
        <ValidationMessage For="@(() => obj.Designation)" />
    </div>

    <div class="form-group col-4">
        <label for="image">Image:</label>
        <InputFile id="image" class="form-control" OnChange="OnInputFileChange" />
        <ValidationMessage For="@(() => imageFile)" />
    </div>
    </div>
    <div class="row">
    <div class="form-group col-6">
            <label for="salary">Salary:</label>
            <div class="input-group mb-3">
            <InputNumber id="salary" class="form-control" @bind-Value="@obj.Salary" />
            <div class="input-group-append">
                <span class="input-group-text bg-white" id="basic-addon2">DH</span>
             </div>
             </div>
            <ValidationMessage For="@(() => obj.Salary)" />
    </div>

    <div class="form-group col-6">
            <label for="joiningDate">Joining Date:</label>
            <InputDate id="joiningDate" class="form-control" @bind-Value="@obj.JoiningDate" />
            <ValidationMessage For="@(() => obj.JoiningDate)" />
    </div>
    </div>

    <div class="d-flex justify-content-end gap-3 mt-3">
        <input type="button" class="btn btn-white" @onclick="@Cancel" value="Cancel"/>
        <button type="submit" class="btn btn-dark text-white">Submit</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }

    Employee obj = new Employee();
    private IBrowserFile imageFile;

    protected override async Task OnInitializedAsync()
    {
        obj = await employeeService.GetEmployeeById(Id);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
    }

    protected async Task UpdateEmployee()
    {
        if (imageFile != null)
        {
            using (var memoryStream = new MemoryStream())
            {
                await imageFile.OpenReadStream().CopyToAsync(memoryStream);
                obj.ImagePath = memoryStream.ToArray();
            }
        }

        if (obj != null)
        {
            await employeeService.UpdateEmployeeDetails(obj);
            NavigationManager.NavigateTo("Employees");
        }
    }

    protected void Cancel()
    {
        NavigationManager.NavigateTo("Employees");
    }
}
